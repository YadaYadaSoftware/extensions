using System.ComponentModel.DataAnnotations;

namespace System.Reflection;

public static class TypeExtensions
{
    public static Type GetUnderlyingTypeIfNullable(this Type type)
    {
        return Nullable.GetUnderlyingType(type) ?? type;
    }
    public static bool HasProperty(this Type type, string propertyName)
    {
        return type.GetProperty(propertyName) != null;
    }
    public static bool IsAssignableToGenericType(this Type givenType, Type genericType)
    {
        var interfaceTypes = givenType.GetInterfaces();

        foreach (var it in interfaceTypes)
        {
            if (it.IsGenericType && it.GetGenericTypeDefinition() == genericType)
                return true;
        }

        if (givenType.IsGenericType && givenType.GetGenericTypeDefinition() == genericType)
            return true;

        Type baseType = givenType.BaseType;
        if (baseType == null) return false;

        return IsAssignableToGenericType(baseType, genericType);
    }

    public static List<string> GetGroupNames(this Type type)
    {
        if (type.GetDisplayAttribute() is { } displayAttribute)
        {
            return displayAttribute.GetGroupName()?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        }
        else
        {
            throw new InvalidOperationException($"{nameof(global::System.Reflection.TypeExtensions)}.{nameof(GetGroupNames)}: Type {type.FullName} does not have a {nameof(DisplayAttribute)}.");
        }

    }

    public static DisplayAttribute GetDisplayAttribute(this Type type)
    {
        if (type.GetCustomAttribute<DisplayAttribute>() is {} displayAttribute) return displayAttribute;
        return type.GetMetadataType().GetCustomAttribute<DisplayAttribute>();
    }

    public static PropertyInfo GetKeyProperty(this Type type)
    {
        var keyProperty = type.GetMetadataType().GetProperties().Single(_ => _.GetCustomAttribute<KeyAttribute>() is { });
        return type.GetProperty(keyProperty.Name);
    }

    public static string GetName(this Type type)
    {
        return type.GetDisplayAttribute()?.GetName() ?? type.Name;
    }
    public static string GetPluralName(this Type type)
    {
        if (type.GetCustomAttribute<DisplayExAttribute>() is { } displayExAttribute) return displayExAttribute.PluralName;
        return type.GetDisplayAttribute()?.GetName() ?? type.Name;
    }

    public static Type GetEditModelType(this Type type)
    {
        if (type.GetCustomAttribute<EditModelAttribute>() is {} editModelAttribute) return editModelAttribute.EditModelType;
        return type;
    }

    public static DisplayColumnAttribute GetDisplayColumn(this Type type)
    {
        return type.GetCustomAttribute<DisplayColumnAttribute>();
    }
    public static string? GetDisplayColumnValue(this Type type, object item)
    {
        if (type.GetDisplayColumnProperty() is { } displayColumnProperty)
        {
            return displayColumnProperty.GetValue(item)?.ToString();
        }

        return null;
    }
    public static PropertyInfo GetDisplayColumnProperty(this Type type)
    {
        if (type.GetDisplayColumn() is { } displayColumn) return type.GetProperty(displayColumn.DisplayColumn);
        return null;
    }


    public static List<PropertyInfo> GetAutoGeneratedFieldProperties(this Type type)
    {
        return type.GetProperties().Where(info => info.IsAutoGenerateField()).OrderBy(info => info.GetOrder()).ToList();

    }

    public static Type GetMetadataType(this Type type)
    {
        if (type.GetCustomAttribute<MetadataTypeAttribute>() is { } metadataTypeAttribute)
        {
            return metadataTypeAttribute.MetadataClassType;
        }
        return type;

    }

}