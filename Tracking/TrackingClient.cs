//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace FedEx.Tracking
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Track Multiple Piece Shipment
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrkcResponseVO_Associated> TrackV1AssociatedshipmentsAsync(Full_Schema_Multiple_Piece_Shipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return TrackV1AssociatedshipmentsAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Track Multiple Piece Shipment
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrkcResponseVO_Associated> TrackV1AssociatedshipmentsAsync(Full_Schema_Multiple_Piece_Shipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("track/v1/associatedshipments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrkcResponseVO_Associated>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send Notification
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrkcResponseVO_Notifications> TrackV1NotificationsAsync(Full_Schema_Notification body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return TrackV1NotificationsAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send Notification
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrkcResponseVO_Notifications> TrackV1NotificationsAsync(Full_Schema_Notification body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("track/v1/notifications");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrkcResponseVO_Notifications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Track by References
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrkcResponseVO_ReferenceNumber> TrackV1ReferencenumbersAsync(Full_Schema_Tracking_References body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return TrackV1ReferencenumbersAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Track by References
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrkcResponseVO_ReferenceNumber> TrackV1ReferencenumbersAsync(Full_Schema_Tracking_References body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("track/v1/referencenumbers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrkcResponseVO_ReferenceNumber>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Track by Tracking Control Number
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrkcResponseVO_TCN> TrackV1TcnAsync(Full_Schema_TCN body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return TrackV1TcnAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Track by Tracking Control Number
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrkcResponseVO_TCN> TrackV1TcnAsync(Full_Schema_TCN body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("track/v1/tcn");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrkcResponseVO_TCN>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Track Document
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrkcResponseVO_SPOD> TrackV1TrackingdocumentsAsync(Full_Schema_SPOD body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return TrackV1TrackingdocumentsAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Track Document
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrkcResponseVO_SPOD> TrackV1TrackingdocumentsAsync(Full_Schema_SPOD body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("track/v1/trackingdocuments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrkcResponseVO_SPOD>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Track by Tracking Number
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrkcResponseVO_TrackingNumber> TrackV1TrackingnumbersAsync(Full_Schema_Tracking_Numbers body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return TrackV1TrackingnumbersAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Track by Tracking Number
        /// </summary>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrkcResponseVO_TrackingNumber> TrackV1TrackingnumbersAsync(Full_Schema_Tracking_Numbers body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("track/v1/trackingnumbers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrkcResponseVO_TrackingNumber>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The request elements for Tracking by associated shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Multiple_Piece_Shipment
    {
        /// <summary>
        /// Indicates if detailed scans are requested or not. &lt;br&gt;Valid values are True, or False.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeDetailedScans", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDetailedScans { get; set; }

        [Newtonsoft.Json.JsonProperty("masterTrackingNumberInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public MasterTrackingInfo MasterTrackingNumberInfo { get; set; } = new MasterTrackingInfo();

        /// <summary>
        /// The associated shipment type, such as MPS, Group MPS, or an outbound shipment which is linked to a return shipment. Example: STANDARD_MPS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Full_Schema_Multiple_Piece_ShipmentAssociatedType AssociatedType { get; set; }

        [Newtonsoft.Json.JsonProperty("pagingDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingDetails PagingDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tracking details for the shipment to be tracked
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MasterTrackingInfo
    {
        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number within a specific date range. &lt;br&gt;Format: YYYY-MM-DD&lt;br&gt; Example: 2020-03-29
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateBegin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateBegin { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number within a specific date range. &lt;br&gt;Format: YYYY-MM-DD&lt;br&gt; Example: 2020-04-01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateEnd { get; set; }

        [Newtonsoft.Json.JsonProperty("trackingNumberInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackingNumberInfo TrackingNumberInfo { get; set; } = new TrackingNumberInfo();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information uniquely identifying a shipment such as Tracking number, ShipDate, and Tracking number uniqueId.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingNumberInfo
    {
        /// <summary>
        /// This is a Tracking number for FedEx packages used for tracking a single package or group of packages. &lt;br&gt; Example: 128667043726&lt;br&gt;&lt;a onclick='loadDocReference("mocktrackingnumbersforfedexexpressandfedexground")'&gt;Click here to see Mock Tracking Numbers.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// This is a placeholder to provide the FedEx operating company (transportation) code used for package delivery. &lt;br&gt; Example: FDXE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingNumberInfoCarrierCode? CarrierCode { get; set; }

        /// <summary>
        /// Unique identifier used to distinguish duplicate FedEx tracking numbers. This value will be set by FedEx systems. &lt;br&gt; Example: 245822\~123456789012\~FDEG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumberUniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumberUniqueId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the details about how to retrieve the subsequent pages when there is more than one page in the TrackReply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingDetails
    {
        /// <summary>
        /// &lt;p&gt;Use this element to specify the number of Tracking results to be returned in the Tracking response. Use this and pagingToken elements, to retrieve remaining set of the track results.&lt;/p&gt;&lt;p&gt;&lt;u&gt;Here is how the paging works:&lt;/u&gt;&lt;br&gt;For your first track request, send element &lt;i&gt;resultsPerPage&lt;/i&gt;, with a number XX (5) and the response will return XX (5) results along with element &lt;i&gt;pagingToken&lt;/i&gt; and &lt;i&gt;moreDataAvailable&lt;/i&gt; = true or false based on the number of tracking results.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;i&gt;moreDataAvailable&lt;/i&gt; = false, then there are no more track results can be retrieved further.&lt;/li&gt;&lt;li&gt;If &lt;i&gt;moreDataAvailable&lt;/i&gt; = True, then it means there are more track results and hence send the next tracking request with &lt;i&gt;resultsPerPage&lt;/i&gt; = YY (4) and &lt;i&gt;pagingToken&lt;/i&gt; = XX + 1 (5)  from Track Response element &lt;i&gt;pagingToken&lt;/i&gt;. This can be continued until the &lt;i&gt;moreDataAvailable&lt;/i&gt; becomes false or there are no more tracking results.&lt;/li&gt;&lt;/ul&gt; &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResultsPerPage { get; set; }

        /// <summary>
        /// &lt;p&gt;Use this element to specify the starting sequence for the next set of tracking results. This element can be specified if paging is used in the initial tracking request and you need to request next set of track results.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Note:  This element not to be used in the initial tracking request and only should be used in the subsequent track requests when there is paging (element &lt;/i&gt;resultsPerPage &lt;i&gt;is specified) indicated.&lt;/i&gt;&lt;/p&gt; &lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pagingToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PagingToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrkcResponseVO_Associated
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_Associated Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements for Tracking by Associated Shipment request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_Associated
    {
        /// <summary>
        /// Contains the detailed tracking entry information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completeTrackResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompleteTrackResult> CompleteTrackResults { get; set; }

        /// <summary>
        /// The cxs alert type, alert code, and alert messages.&lt;br&gt;Example: example: TRACKING.DATA.NOTFOUND -  Tracking data unavailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Detailed and complete track results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompleteTrackResult
    {
        /// <summary>
        /// A tracking number to identify a package.&lt;br&gt; Example: 123456789012
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// An array of detailed tracking information for the requested packages(s). In case of duplicate shipments, multiple track details will be populated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackResult> TrackResults { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains detailed tracking information for the requested packages(s). In case of duplicates, multiple track details will be populated. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackResult
    {
        [Newtonsoft.Json.JsonProperty("trackingNumberInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingNumberInfo TrackingNumberInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalTrackingInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalTrackingInfo AdditionalTrackingInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("distanceToDestination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Distance DistanceToDestination { get; set; }

        /// <summary>
        /// Indicates the consolidation details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consolidationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConsolidationDetail> ConsolidationDetail { get; set; }

        /// <summary>
        /// The associated meter number for your FedEx account number. Maximum of 9 characters. &lt;br&gt; Example: 8468376
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meterNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeterNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("returnDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnDetail ReturnDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDescriptionDetail ServiceDetail { get; set; }

        /// <summary>
        /// Location details for the FedEx facility where the package will be or has been delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDetail_1 DestinationLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("latestStatusDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetail LatestStatusDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceCommitMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceCommitMessage ServiceCommitMessage { get; set; }

        /// <summary>
        /// Notifications to the end user that provide additional information relevant to the tracked shipment. For example, a notification may indicate that a change in behavior has occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("informationNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InformationNoteDetail> InformationNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CXSError Error { get; set; }

        /// <summary>
        /// Indicate the special handlings on the package being tracked. Includes Special handlings requested for the package like signature options, Broker select or COD etc.&lt;br&gt;&lt;a onclick='loadDocReference("fedexexpressspecialhandlingcodes")'&gt;Click here to see FedEx Express Special Handling Codes.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialHandlings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackSpecialHandling> SpecialHandlings { get; set; }

        /// <summary>
        /// The available tracking documents for the shipment being tracked. Available tracking documents includes SPOD and Bill of lading.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableImages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableImagesDetail> AvailableImages { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryDetails DeliveryDetails { get; set; }

        /// <summary>
        /// FedEx scan event information for a shipment. Includes the list of events and/or scans applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scanEvents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScanEvent> ScanEvents { get; set; }

        /// <summary>
        /// Date and time information for the tracked shipment. Date and time information for the tracked shipment includes various type of date time including when the package was shipped, when it is expected to deliver, when it is actually delivered etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateAndTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackingDateAndTime> DateAndTimes { get; set; }

        [Newtonsoft.Json.JsonProperty("packageDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageDetail PackageDetails { get; set; }

        /// <summary>
        /// Classification codes for the goods in package. Goods classification codes required for clearance purpose. &lt;br&gt; Example: goodsClassificationCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("goodsClassificationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GoodsClassificationCode { get; set; }

        /// <summary>
        /// Location details for the Fedex facility holding package for delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdAtLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDetail HoldAtLocation { get; set; }

        /// <summary>
        /// List of delivery options that can be used to customize the delivery of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDeliveryOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomDeliveryOption> CustomDeliveryOptions { get; set; }

        /// <summary>
        /// The estimated window for time of delivery.  May be periodically updated based on available in-flight shipment information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedDeliveryTimeWindow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeWindow EstimatedDeliveryTimeWindow { get; set; }

        /// <summary>
        /// Piece count information at origin and destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieceCounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PieceCountDetail> PieceCounts { get; set; }

        [Newtonsoft.Json.JsonProperty("originLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDetail_1 OriginLocation { get; set; }

        /// <summary>
        /// Contact and address information of recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress RecipientInformation { get; set; }

        /// <summary>
        /// The standard committed window of time by which the package is expected to be delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("standardTransitTimeWindow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeWindow StandardTransitTimeWindow { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackShipmentDetail ShipmentDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonDetail ReasonDetail { get; set; }

        /// <summary>
        /// The types of email notifications that are available for the package. &lt;br&gt; Example:ON_DELIVERY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableNotifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AvailableNotifications { get; set; }

        /// <summary>
        /// Contact and address information of shipper.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipperInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress ShipperInformation { get; set; }

        /// <summary>
        /// Last updated delivery address for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdatedDestinationAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressVO LastUpdatedDestinationAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional Tracking number information like nickname, notes, shipment attributes etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalTrackingInfo
    {
        /// <summary>
        /// Field which indicates if the current shipment has associated shipments.&lt;br&gt; Example: false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAssociatedShipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAssociatedShipments { get; set; }

        /// <summary>
        /// Field which holds information about nickname of the shipment. &lt;br&gt; Example: Shipment nickname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nickname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }

        /// <summary>
        /// Other related identifiers for this package such as reference numbers, purchase order number etc. Provides identifiers other than tracking number that can be used in order to track the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PackageIdentifier> PackageIdentifiers { get; set; }

        /// <summary>
        /// Field which holds customer assigned notes for a package.&lt;br&gt; Example: shipment notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNotes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type and value of the package identifier that is to be used to retrieve the tracking information for a package or group of packages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageIdentifier
    {
        /// <summary>
        /// Indicate the package identifier to identify the package.&lt;br&gt; Example: SHIPPER_REFERENCE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageIdentifierType? Type { get; set; }

        /// <summary>
        /// Field which holds the value of the identifier used to identify the package. &lt;br&gt;Example: 'ASJFGVAS'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Value { get; set; }

        /// <summary>
        /// Unique identifier used to distinguish duplicate FedEx tracking numbers. This value will be set by FedEx systems. &lt;br&gt; Example: 245822\~123456789012\~FDEG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumberUniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumberUniqueId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Distance remaining to the destination. Only returned for FedEx Custom Critical shipments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Distance
    {
        /// <summary>
        /// Field which holds the distance unit type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DistanceUnits? Units { get; set; }

        /// <summary>
        /// Field which holds the value for the distance.&lt;br&gt; Example: 685.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the consolidation details for packages within a shipment identified as CONSOLIDATED.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsolidationDetail
    {
        /// <summary>
        /// The timestamp for the consolidation. &lt;br&gt; Example: 2020-10-13T03:54:44-06:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeStamp { get; set; }

        /// <summary>
        /// The identifier for the consolidation. &lt;br&gt; Example: 47936927
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consolidationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsolidationID { get; set; }

        /// <summary>
        /// Specifies the reason details for the consolidation event for a package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonDetail ReasonDetail { get; set; }

        /// <summary>
        /// Specifies the package count for the consolidation. &lt;br&gt; Example: 25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageCount { get; set; }

        /// <summary>
        /// Specifies the consolidation event type for a package.  A package can be ADDED to, REMOVED from, or EXCLUDED from a consolidation. &lt;br&gt; Example: PACKAGE_ADDED_TO_CONSOLIDATION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object contains reason description and type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReasonDetail
    {
        /// <summary>
        /// Field which holds the reason description. &lt;br&gt; Example: Wrong color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Field which holds the reason type.&lt;br&gt; Example: REJECTED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies return information related to a return shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnDetail
    {
        /// <summary>
        /// Name of person authorizing the return, entered by the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizationName { get; set; }

        /// <summary>
        /// Specifies the return reason details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReasonDetail> ReasonDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object contains service description details for the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDescriptionDetail
    {
        /// <summary>
        /// Field which holds the text description of the service type of this package.&lt;br&gt; Example: FedEx Freight Economy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Field which holds the abbreviated text description of the service type of this package.&lt;br&gt; Example: FL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// This is the service type.&lt;br&gt; Example: FEDEX_FREIGHT_ECONOMY&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;Click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Location details for the fedex facility.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationDetail_1
    {
        /// <summary>
        /// Location Identification for facilities identified by an alpha numeric location code. Passing Location Id of the Hold at Location (HAL) address is strongly recommended to ensure packages are delivered to the correct address.&lt;br&gt; Example: SEA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("locationContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContactAndAddress_1 LocationContactAndAddress { get; set; } = new ContactAndAddress_1();

        /// <summary>
        /// The FedEx Location Type.&lt;br&gt; Example: PICKUP_LOCTION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationDetail_1LocationType LocationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Location Contact And Address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress_1
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContactVO_1 Contact { get; set; } = new ContactVO_1();

        /// <summary>
        /// Required.
        /// <br/>
        /// <br/>Descriptive data for a physical location.  may be used as an actual physical address(place to which one could go), or a container of 'address parts' which should be handled as a unit(such as a city-state-zip combination within the US).
        /// <br/>
        /// <br/>Conditional when used with Payor object.  Required if entering using RECIPIENT or THIRD_PARTY.  Required if not-authenticated and SENDER is selected
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressVO_1 Address { get; set; } = new AddressVO_1();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details for this package.&lt;br&gt;Note: contact is shown in response only in secured flow. For non secured flow, contact is not shown in the response.'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactVO_1
    {
        /// <summary>
        /// Identifies the contact person's name. Max Length is 70.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Identifies the phone number associated with this contact. Max length is 15. &lt;br&gt;Example: '1234567890'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Identifies the company this contact is associated with. Max length is 35. &lt;br&gt; Example: Fedex
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address where the package was actually delivered. Contrast with destinationAddress, which is the location to which the package was intended to be delivered. Addresses may differ due to delivery to a behavior, hold at FedEx location, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressVO_1
    {
        /// <summary>
        /// Specifies the FedEx classification type for an address. &lt;br&gt;Valid values are BUSINESS, RESIDENTIAL, MIXED, UNKNOWN.&lt;br&gt; Example: BUSINESS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Classification { get; set; }

        /// <summary>
        /// Placeholder to indicate whether the address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Residential { get; set; }

        /// <summary>
        /// Combination of number, street name, etc. At least one line is required for a valid physical address; empty lines should not be included.&lt;br&gt; Example: ["1043 North Easy Street", "Suite 999"]. &lt;br&gt;Note: Street lines is shown in response only in secured flow. For non secured flow, street lines is not shown in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Conditional&lt;br&gt;The name of the city, town, etc. &lt;br&gt; Example: SEATTLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Relevant only to addresses in Puerto Rico, where multiple addresses within the same postal code can have the same house number and street name. When this is the case, the urbanization code is needed to distinguish them.&lt;br&gt; Example: RAFAEL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urbanizationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrbanizationCode { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code. &lt;br&gt; Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State/Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// Placeholder to specify postal code for the address. Postal Code is required for postal-aware countries.&lt;br&gt; Example: 98101&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Placeholder for country code (2 characters) for the address.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies details about the status of the track information for the shipment being tracked.  AncilliaryDetails may also be available which describe the cause of exception along with any action that needs to taken by customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusDetail
    {
        /// <summary>
        /// Address information related to the associated Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scanLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressVO ScanLocation { get; set; }

        /// <summary>
        /// A code that identifies this type of status.&lt;br&gt; Example:PU,DE,DP,HL,OC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Specifies the latest status detail code of the package.&lt;br&gt; Example:PU,DE,DP,HL,OC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("derivedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedCode { get; set; }

        /// <summary>
        /// Specifies the cause of exception along with any action that needs to taken by customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancillaryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusAncillaryDetail> AncillaryDetails { get; set; }

        /// <summary>
        /// This is the latest tracking status by locale.&lt;br&gt; Example: Picked up
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusByLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusByLocale { get; set; }

        /// <summary>
        /// A human-readable description of this status.&lt;br&gt; Example: Picked up
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("delayDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DelayDetail DelayDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address where the package was actually delivered. Contrast with destinationAddress, which is the location to which the package was intended to be delivered. Addresses may differ due to delivery to a behavior, hold at FedEx location, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressVO
    {
        /// <summary>
        /// Specifies the FedEx classification type for an address. &lt;br&gt;Valid values are BUSINESS, RESIDENTIAL, MIXED, UNKNOWN.&lt;br&gt; Example: BUSINESS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Classification { get; set; }

        /// <summary>
        /// Placeholder to indicate whether the address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Residential { get; set; }

        /// <summary>
        /// Combination of number, street name, etc. At least one line is required for a valid physical address; empty lines should not be included.&lt;br&gt; Example: ["1043 North Easy Street", "Suite 999"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Conditional&lt;br&gt;The name of the city, town, etc. &lt;br&gt; Example: SEATTLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Relevant only to addresses in Puerto Rico, where multiple addresses within the same postal code can have the same house number and street name. When this is the case, the urbanization code is needed to distinguish them.&lt;br&gt; Example: RAFAEL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urbanizationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrbanizationCode { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code. &lt;br&gt; Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State/Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// Placeholder to specify postal code for the address. Postal Code is required for postal-aware countries.&lt;br&gt; Example: 98101&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Placeholder for country code (2 characters) for the address.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Field holds the fully spelled out name of a country.&lt;br&gt; Example: United States
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Field which holds status code of the track information for the shipment being tracked.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusAncillaryDetail
    {
        /// <summary>
        /// Field which holds Reason code associated to the status of the shipment being tracked.&lt;br&gt; Example: 15,84,IN001,015A,02
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        /// <summary>
        /// Field which holds Reason description associated to the status of the shipment being tracked.&lt;br&gt; Example: Customer not available or business closed,Local delivery restriction, delivery not attempted,Package delivered to recipient address - release authorized
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonDescription { get; set; }

        /// <summary>
        /// Field which holds recommended action for customer to resolve reason.&lt;br&gt; Example: Contact us at &lt;http://www.fedex.com/us/customersupport/call/index.html&gt; to discuss possible delivery or pickup alternatives.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        /// <summary>
        /// Field which holds recommended action description for customer to resolve reason.&lt;br&gt; Example: Customer not Available or Business Closed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionDescription { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the information about delays.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DelayDetail
    {
        /// <summary>
        /// Specifies the type of delay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DelayDetailType? Type { get; set; }

        /// <summary>
        /// Specifies the subType of delay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DelayDetailSubType? SubType { get; set; }

        /// <summary>
        /// Specifies the status of package indicating whether a package is arriving early or is on time or has been delayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DelayDetailStatus? Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Commitment message for this package. Informative messages related to the package. Used to convey information such as FedEx has received information about a package but has not yet taken possession of it. FedEx has handed the package off to a third party for final delivery. The package delivery has been cancelled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceCommitMessage
    {
        /// <summary>
        /// Field which holds the commitment message for this package.&lt;br&gt; Example: No scheduled delivery date available at this time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Field which holds the type of service commit message.&lt;br&gt; Example: ESTIMATED_DELIVERY_DATE_UNAVAILABLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceCommitMessageType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Notifications to the end user that provide additional information relevant to the tracked shipment. For example, a notification may indicate that a change in behavior has occurred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InformationNoteDetail
    {
        /// <summary>
        /// Field which holds the code that designates the type of informational message being returned. &lt;br&gt;Example: 'CLEARANCE_ENTRY_FEE_APPLIES'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Field which holds the The informational message in human readable form.&lt;br&gt; Example: this is an informational message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains error details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError
    {
        /// <summary>
        /// Error Code. &lt;br&gt; Example: TRACKING.TRACKINGNUMBER.EMPTY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// List of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Error Message. &lt;br&gt;Example: Please provide tracking number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of parameters which indicates the properties of the alert message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        /// <summary>
        /// Identifies the error option to be applied. &lt;br&gt;Example: value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Indicates the value associated with the key.&lt;br&gt; Example: key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify types of special handlings that are applied to this package.&lt;br&gt;&lt;a onclick='loadDocReference("fedexexpressspecialhandlingcodes")'&gt;Click here to see FedEx Express Special Handling Codes.&lt;/a&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackSpecialHandling
    {
        /// <summary>
        /// Field which holds the text description of the special handling code.&lt;br&gt; Example: Deliver Weekday
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Field which holds type representing the special handling.&lt;br&gt; Example: DELIVER_WEEKDAY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Field which holds information about the payment handling related to the special handling.&lt;br&gt; Example: OTHER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The available tracking documents for the shipment being tracked. Available tracking documents includes SPOD and Bill of lading.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableImagesDetail
    {
        /// <summary>
        /// Field which holds the size of available images for the shipment being tracked. Example: LARGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableImagesDetailSize? Size { get; set; }

        /// <summary>
        /// Field which holds the type of available images for the shipment being tracked.&lt;br&gt; Example: BILL_OF_LADING
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableImagesDetailType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Delivery related information for the tracked package. Provides delivery details as actual delivery address once the package is delivered, the number of delivery attempts made etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryDetails
    {
        /// <summary>
        /// Field which holds the name of the person who received the package, if applicable.&lt;br&gt; Example: Receiver
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedByName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivedByName { get; set; }

        /// <summary>
        /// Field which holds the destination service area code.&lt;br&gt; Example: EDDUNAVAILABLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationServiceArea { get; set; }

        /// <summary>
        /// Field which holds the description corresponding to the destination service area.&lt;br&gt; Example: Appointment Required
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationServiceAreaDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationServiceAreaDescription { get; set; }

        /// <summary>
        /// Field which holds the FedEx location description for the package destination.&lt;br&gt; Example: Receptionist/Front Desk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("actualDeliveryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressVO ActualDeliveryAddress { get; set; }

        /// <summary>
        /// This element indicates whether the package will be delivered today. The value 'True', indicates that today is package delivery.&lt;br&gt; Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryToday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeliveryToday { get; set; }

        /// <summary>
        /// Field which holds the FedEx location type code for the package destination.&lt;br&gt; Example: FEDEX_EXPRESS_STATION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationType { get; set; }

        /// <summary>
        /// Field which holds the name of the person who signed for the package, if applicable.&lt;br&gt; Example: Reciever
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signedByName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedByName { get; set; }

        /// <summary>
        /// Field which identifies the method of office order delivery. 'Pickup' - the recipient will be picking up the office order from the FedEx Office Center. 'Shipment' - the office order will be delivered to the recipient as a FedEx shipment using the FedEx Service Type requested. 'Courier' - the office order will be delivered to the recipient by local courier. &lt;br&gt; Example: Courier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officeOrderDeliveryMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeOrderDeliveryMethod { get; set; }

        /// <summary>
        /// Field which holds the number of delivery attempts made to deliver the package.&lt;br&gt; Example: 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryAttempts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryAttempts { get; set; }

        /// <summary>
        /// Specifies eligibility type for the different delivery option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryOptionEligibilityDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryOptionElgibilityDetails> DeliveryOptionEligibilityDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies details of delivery options and its eligibility type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOptionElgibilityDetails
    {
        /// <summary>
        /// This is the type of delivery option.&lt;br&gt;&lt;br&gt;&lt;i&gt;Note: For eligibile DISPUTE_DELIVERY, RETURN_TO_SHIPPER, SUPPLEMENT_ADDRESS go to fedex.com to perform the option/action.&lt;/i&gt;&lt;br&gt;&lt;br&gt;Example: INDIRECT_SIGNATURE_RELEASE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("option", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryOptionElgibilityDetailsOption? Option { get; set; }

        /// <summary>
        /// Eligibility of the customer for the specific delivery options.&lt;br&gt; Example: INELIGIBLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eligibility { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// FedEx scanning event information for a package.&lt;br&gt;&lt;a onclick='loadDocReference("trackservicescancodes")'&gt;Click here to see Track Service Scan Codes.&lt;/a&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScanEvent
    {
        /// <summary>
        /// Date and time of the scan event.&lt;br&gt; Example: '2018-02-02T12:01:00-07:00'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Field which holds status description of the track information for the scan event.&lt;br&gt; Example: 'Picked Up'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("derivedStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedStatus { get; set; }

        /// <summary>
        /// Location Details for the FedEx facility where the scan event occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scanLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDetail_1 ScanLocation { get; set; }

        /// <summary>
        /// Field which holds the text description for the exception if the event was an exception .&lt;br&gt;Example: Package available for clearance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptionDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionDescription { get; set; }

        /// <summary>
        /// Field which holds the text description of the scan event.&lt;br&gt; Example: 'Picked Up'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventDescription { get; set; }

        /// <summary>
        /// Field which holds the code identifying the type of scan event.&lt;br&gt; Example: 'PU'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType { get; set; }

        /// <summary>
        /// Field which holds status code of the track information for the scan event.&lt;br&gt; Example: 'PU'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("derivedStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedStatusCode { get; set; }

        /// <summary>
        /// Field which holds the code identifier for the exception if the event was an exception. &lt;br&gt; Example: A25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("delayDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DelayDetail DelayDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date and time information for the tracked shipment. Date and time information for the tracked shipment includes various type of date time including when the package was shipped, when it is expected to deliver, when it is actually delivered etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingDateAndTime
    {
        /// <summary>
        /// Field which holds the tracking date or timestamp in ISO format.&lt;br&gt;Format: YYYY-MM-DD&lt;br&gt; Example: '2019-05-07'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }

        /// <summary>
        /// Field which holds information about the type of tracking date or timestamp.&lt;br&gt; Example: 'ACTUAL_DELIVERY'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingDateAndTimeType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the packages in the shipment being tracked. Includes details like package type, weight, dimensions, declared value, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageDetail
    {
        /// <summary>
        /// Indicate the physical package type for non-Express shipments.&lt;br&gt;&lt;a onclick='loadDocReference("subpackagetypes")'&gt;Click here to see Available Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("physicalPackagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalPackagingType { get; set; }

        /// <summary>
        /// Field which holds the number representing which package in a multi-piece shipment applies to this TrackDetail.&lt;br&gt; Example: 45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// Field which holds information about total count of the undelivered packages in the shipment. &lt;br&gt; Example: 7
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undeliveredCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UndeliveredCount { get; set; }

        [Newtonsoft.Json.JsonProperty("packagingDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackagingDescription PackagingDescription { get; set; }

        /// <summary>
        /// Field which holds the total number of pieces in the shipment which includes the package represented by this TrackDetail.&lt;br&gt; Example: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Count { get; set; }

        [Newtonsoft.Json.JsonProperty("weightAndDimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingWeightAndDimensions WeightAndDimensions { get; set; }

        /// <summary>
        /// Field which holds information about the package content of the shipment. Populated for secure users only.&lt;br&gt; Example: wire hangers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PackageContent { get; set; }

        /// <summary>
        /// Field which holds information about total count of the packages in the shipment.&lt;br&gt; Example: 100
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPieceCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentPieceCount { get; set; }

        /// <summary>
        /// This is the declared value. Declared Value represents FedEx maximum liability in connection with a shipment of that Package, including but not limited to, any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information relating to the Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount DeclaredValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Description of the packaging used for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackagingDescription
    {
        /// <summary>
        /// Indicate the packaging type description.&lt;br&gt; Example: FedEx Pak
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Indicate the packaging type.&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;Click here to see Package Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Field which holds the weight and dimension information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingWeightAndDimensions
    {
        /// <summary>
        /// Field which holds the weight of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Weight> Weight { get; set; }

        /// <summary>
        /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html#" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dimensions> Dimensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the package weight details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        /// <summary>
        /// This is package weight type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUnit? Unit { get; set; }

        /// <summary>
        /// This is package weight. Max. Length is 99999. &lt;br&gt; Example: 22222.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html#" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        /// <summary>
        /// Unit of measure for the provided dimensions.&lt;br&gt;Valid Values are IN - inches, CM - centimeters. &lt;br&gt;Note: Any value other than CM including blank/null will default to IN. &lt;br&gt;Example: CM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DimensionsUnits? Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {
        /// <summary>
        /// Indicate the currency code.&lt;br&gt; Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Field which holds the amount value. &lt;br&gt; Example: 56.80
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Location details for the fedex facility.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationDetail
    {
        /// <summary>
        /// Location Identification for facilities identified by an alpha numeric location code. Passing Location Id of the Hold at Location (HAL) address is strongly recommended to ensure packages are delivered to the correct address.&lt;br&gt; Example: SEA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("locationContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContactAndAddress LocationContactAndAddress { get; set; } = new ContactAndAddress();

        /// <summary>
        /// The FedEx Location Type.&lt;br&gt; Example: PICKUP_LOCTION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationDetailLocationType LocationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Location Contact And Address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContactVO Contact { get; set; } = new ContactVO();

        /// <summary>
        /// Required.
        /// <br/>
        /// <br/>Descriptive data for a physical location.  may be used as an actual physical address(place to which one could go), or a container of 'address parts' which should be handled as a unit(such as a city-state-zip combination within the US).
        /// <br/>
        /// <br/>Conditional when used with Payor object.  Required if entering using RECIPIENT or THIRD_PARTY.  Required if not-authenticated and SENDER is selected
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressVO Address { get; set; } = new AddressVO();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details for this package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactVO
    {
        /// <summary>
        /// Identifies the contact person's name. Max Length is 70.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Identifies the phone number associated with this contact. Max length is 15. &lt;br&gt;Example: '1234567890'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Identifies the company this contact is associated with. Max length is 35. &lt;br&gt; Example: Fedex
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of delivery options that can be used to customize the delivery of the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomDeliveryOption
    {
        [Newtonsoft.Json.JsonProperty("requestedAppointmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedAppointmentDetail RequestedAppointmentDetail { get; set; }

        /// <summary>
        /// Field which specifies the description of the custom delivery option requested &lt;br&gt; Example: Redirect the package to the hold location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Field which specifies the type of the custom delivery option requested.&lt;br&gt; Example: REDIRECT_TO_HOLD_AT_LOCATION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomDeliveryOptionType? Type { get; set; }

        /// <summary>
        /// Field which specifies the status of the custom delivery option requested.&lt;br&gt; Example: HELD
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Field which specifies the details of the requested appointment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedAppointmentDetail
    {
        /// <summary>
        /// Field which holds the requested appointment date.&lt;br&gt;Format: YYYY-MM-DD&lt;br&gt; example: '2019-05-07'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Array of different appointment time windows available on the date specified such as, Morning, afternoon, mid-day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("window", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeWindow> Window { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeWindow
    {
        /// <summary>
        /// Field which describes the time window provided. &lt;br&gt; Example: Description field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("window", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeRange Window { get; set; }

        /// <summary>
        /// Field which holds the code representing the description for the time window provided. &lt;br&gt; Example: ESTIMATED_DELIVERY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeWindowType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Field which holds a date/timestamp window.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeRange
    {
        /// <summary>
        /// Field which holds the begin date/timestamp for a range.&lt;br&gt; Example: '2021-10-01T08:00:00'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begins { get; set; }

        /// <summary>
        /// Field which holds the end date/timestamp for a range.&lt;br&gt; Example: '2021-10-15T00:00:00-06:00'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ends { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the count of the packages delivered and the count of the packages at the origin which can be used for verification purposes. Populated for secure users only.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PieceCountDetail
    {
        /// <summary>
        /// Field which holds the piece count. &lt;br&gt; Example: 35
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Count { get; set; }

        /// <summary>
        /// Field which holds the piece count description detail. &lt;br&gt; Example: picec count description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Field which holds the piece count location type. &lt;br&gt; Example: ORIGIN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PieceCountDetailType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Shipment level details for the shipment being tracked. Includes overall shipment weight, contents etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackShipmentDetail
    {
        /// <summary>
        /// Field which holds information about contents of the shipment. Populated for secure users only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentContent> Contents { get; set; }

        /// <summary>
        /// Indicates the shipment is not yet in FedEx possession, but is still in shipper's possession.&lt;br&gt; Example: false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beforePossessionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeforePossessionStatus { get; set; }

        /// <summary>
        /// Array of package level weights, which represent the total weight of the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Weight> Weight { get; set; }

        /// <summary>
        /// Field which holds information about content piece count of the shipment.&lt;br&gt; Example: 3333
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPieceCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentPieceCount { get; set; }

        /// <summary>
        /// Field which holds information about split shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("splitShipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackSplitShipment> SplitShipments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Field which holds information about contents of the shipment. Populated for secure users only.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentContent
    {
        /// <summary>
        /// Field holds the item number for the contents of shipment. &lt;br&gt; Example: RZ5678 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemNumber { get; set; }

        /// <summary>
        /// Field which holds information about the quantity received. &lt;br&gt; Example: 13
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivedQuantity { get; set; }

        /// <summary>
        /// Field which holds informative description about shipment content. &lt;br&gt; Example:  pulyurethane rope
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Holds the part number of the content in shipment. &lt;br&gt; Example: RK1345
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Holds the information about split shipments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackSplitShipment
    {
        /// <summary>
        /// Field which holds the number of pieces in the part.&lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieceCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PieceCount { get; set; }

        /// <summary>
        /// Field which holds human-readable description of the status. &lt;br&gt; Example: status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Field which holds the date and time the status began.&lt;br&gt;Example: '2019-05-07T08:00:07'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Field which holds the status code. &lt;br&gt; Example: statusCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the api alerts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alert
    {
        /// <summary>
        /// Specifies the api alert code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Specifies the api alert type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alertType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertType? AlertType { get; set; }

        /// <summary>
        /// Specifies the api alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError_2> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError_2
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: TRACKING.TRACKINGNUMBER.EMPTY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Please provide tracking number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO401
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError401> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError401
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.AUTHORIZED.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// List of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Access token expired. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO403
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError403> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError403
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: FORBIDDEN.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// List of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We could not authorize your credentials. Please check your permissions and try again
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO404
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError404> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError404
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.FOUND.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// List of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The resource you requested is no longer available. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO500
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError500> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError500
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: INTERNAL.SERVER.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// List of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We encountered an unexpected error and are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO503
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError503> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError503
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: SERVICE.UNAVAILABLE.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// List of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The service is currently unavailable and we are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request to receive a tracking notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Notification
    {
        /// <summary>
        /// Placeholder for Sender contact name.&lt;br&gt; Example: Sam Smith
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderContactName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderContactName { get; set; }

        /// <summary>
        /// Email address of the sender from which the shipment notification will be sent.&lt;br&gt;Example: LSR123@gmail.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderEMailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderEMailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("trackingEventNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackingEventNotificationDetail TrackingEventNotificationDetail { get; set; } = new TrackingEventNotificationDetail();

        [Newtonsoft.Json.JsonProperty("trackingNumberInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackingNumberInfo TrackingNumberInfo { get; set; } = new TrackingNumberInfo();

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number in a specific time range. &lt;br&gt;Format: YYYY-MM-DD&lt;br&gt;example:'2019-10-13'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateBegin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateBegin { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number in a specific time range. &lt;br&gt;Format: YYYY-MM-DD&lt;br&gt;example:'2019-10-13'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateEnd { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tracking Event Notification details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingEventNotificationDetail
    {
        /// <summary>
        /// List of Tracking notifications requested for events like ON_DELIVERY, ON_ESTIMATED_DELIVERY, ON_EXCEPTION, ON_TENDER.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNotifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TrackingNotification> TrackingNotifications { get; set; } = new System.Collections.ObjectModel.Collection<TrackingNotification>();

        /// <summary>
        /// An optional message which will be included in the body of the email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalMessage { get; set; }

        /// <summary>
        /// If value is 'true' then html tags are included in the response date.  If 'false' they are not provided in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportHTML", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object SupportHTML { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies a list of details for Tracking Notifications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingNotification
    {
        [Newtonsoft.Json.JsonProperty("notificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackingNotificationDetail NotificationDetail { get; set; } = new TrackingNotificationDetail();

        /// <summary>
        /// This is to specify Recipient_Role in the shipment. &lt;br&gt;Possible values - BROKER, OTHER, RECIPIENT, SHIPPER &lt;br&gt; Example: SHIPPER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// Identifies the events for which the client is requesting notifications. &lt;br&gt;Possible Values are: ON_DELIVERY, ON_ESTIMATED_DELIVERY, ON_EXCEPTION, ON_TENDER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationEventTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> NotificationEventTypes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// If value is 'true' the current tracking results for the shipment along with notification details will be provided to the client. If 'false' only results for the notification request is provided.&lt;br&gt;Defaults to 'false'&lt;br&gt;Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentResultRequestedFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentResultRequestedFlag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about the notification email and the language of the notification requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingNotificationDetail
    {
        [Newtonsoft.Json.JsonProperty("localization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Localization Localization { get; set; } = new Localization();

        [Newtonsoft.Json.JsonProperty("emailDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public EmailDetail EmailDetail { get; set; } = new EmailDetail();

        /// <summary>
        /// Identifies the format of the notification. &lt;br&gt;valid values are 'HTML' or 'TEXT'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NotificationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the language details for email notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Localization
    {
        /// <summary>
        /// Identifies two-letter code for the language (e.g. en/EN, fr/FR, es/ES etc..).&lt;br&gt; Example: en
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Identifies the two-letter code for the region, used to further identify the requested language.  for example, if you request Spanish, you must include a locale code of &lt;i&gt;US&lt;/i&gt; for North American Spanish, or &lt;i&gt;MX&lt;/i&gt; for Mexico. &lt;br&gt; Example: US&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocaleCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Email Notification Details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailDetail
    {
        /// <summary>
        /// Specifies email address on which user wants to get notified for various registered events.&lt;br&gt;Example: p1@fedex.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specifies the name of the notification recipient.&lt;br&gt;Example: Sam Smith
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information uniquely identifying a shipment such as Tracking number, ShipDate, and Tracking number uniqueId.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingNumberInfo_2
    {
        /// <summary>
        /// This is a Tracking number for FedEx packages used for tracking a single package or group of packages. &lt;br&gt; Example: 128667043726&lt;br&gt;&lt;a onclick='loadDocReference("mocktrackingnumbersforfedexexpressandfedexground")'&gt;Click here to see Mock Tracking Numbers.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// This is a placeholder to provide the FedEx operating company (transportation) code used for package delivery. &lt;br&gt; Example: FDXE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingNumberInfo_2CarrierCode? CarrierCode { get; set; }

        /// <summary>
        /// Unique identifier used to distinguish duplicate FedEx tracking numbers. This value will be set by FedEx systems. &lt;br&gt; Example: 245822\~123456789012\~FDEG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumberUniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumberUniqueId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrkcResponseVO_Notifications
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_Notification Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_Notification
    {
        /// <summary>
        /// Tracking number information which uniquely identifies a package. Tracking number information includes tracking number, carrier code and a unique qualifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TrackingNumberInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingNumberInfo_2 TrackingNumberInfo { get; set; }

        /// <summary>
        /// Address where the package was actually delivered. Contrast with destination Address, which is the location to which the package was intended to be delivered. Addresses may differ due to delivery to a neighbor, hold at FedEx location, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressVO DestinationAddress { get; set; }

        /// <summary>
        /// Details of the recipient notification events. Possible events are - ON_DELIVERY, ON_ESTIMATED_DELIVERY, ON_EXCEPTION, ON_TENDER.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationEventTypes> RecipientDetails { get; set; }

        /// <summary>
        /// The cxs shipment alerts. This includes the alert type, code, and            message.&lt;br&gt;example: TRACKING.DATA.NOTFOUND -  Tracking data unavailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies the events for which the client is requesting notifications. Possible events are -  ON_DELIVERY, ON_ESTIMATED_DELIVERY, ON_EXCEPTION, ON_TENDER &lt;br&gt; Example: [ON_DELIVERY,ON_ESTIMATED_DELIVERY,ON_EXCEPTION]
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationEventTypes : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Specifies the request elements for Track by alternate reference.&lt;br&gt; For a        valid request there are two combinations:&lt;br&gt; 1.) A referenceValue and accountNumber is required OR &lt;br&gt;2.) referenceType &amp; carrierCode, shipdateBegin and shipDateEnd, destinationPostalCode and destinationCountryCode are  required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Tracking_References
    {
        [Newtonsoft.Json.JsonProperty("referencesInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReferenceInformation ReferencesInformation { get; set; } = new ReferenceInformation();

        /// <summary>
        /// Indicates if the detailed scans are being requested or not. If true, the detailed scans will be included in the response returned. &lt;br&gt;Valid values are True or False.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeDetailedScans", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDetailedScans { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the reference details for the tracked shipment. The following rules apply &lt;br&gt;- Either shipper.AccountNumber or Destination.countryCode(and postal for postal aware countries) are required&lt;br&gt;- If ShipDateRangeBegin and End are not present, shipDateRangeBegin will be set to the current date minus 30 days, and shipDdateRangeEnd will default to current date plus one day.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferenceInformation
    {
        /// <summary>
        /// Specifies which carrier should be included.&lt;br&gt; Example: FDXE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Specify the type of alternate reference used. This is Conditionally required.&lt;br&gt; Valid Values :&lt;ul&gt;&lt;li&gt;BILL_OF_LADING&lt;/li&gt;&lt;li&gt;COD_RETURN_TRACKING_NUMBER&lt;/li&gt;&lt;li&gt;CUSTOMER_AUTHORIZATION_NUMBER&lt;/li&gt;&lt;li&gt;CUSTOMER_REFERENCE&lt;/li&gt;&lt;li&gt;DEPARTMENT&lt;/li&gt;&lt;li&gt;DOCUMENT_AIRWAY_BILL&lt;/li&gt;&lt;li&gt;EXPRESS_ALTERNATE_REFERENCE&lt;/li&gt;&lt;li&gt;FEDEX_OFFICE_JOB_ORDER_NUMBER&lt;/li&gt;&lt;li&gt;FREE_FORM_REFERENCE&lt;/li&gt;&lt;li&gt;GROUND_INTERNATIONAL&lt;/li&gt;&lt;li&gt;GROUND_SHIPMENT_ID&lt;/li&gt;&lt;li&gt;INTERNATIONAL_DISTRIBUTION&lt;/li&gt;&lt;li&gt;INVOICE&lt;/li&gt;&lt;li&gt;JOB_GLOBAL_TRACKING_NUMBER&lt;/li&gt;&lt;li&gt;ORDER_GLOBAL_TRACKING_NUMBER&lt;/li&gt;&lt;li&gt;ORDER_TO_PAY_NUMBER&lt;/li&gt;&lt;li&gt;PART_NUMBER&lt;/li&gt;&lt;li&gt;PARTNER_CARRIER_NUMBER&lt;/li&gt;&lt;li&gt;PURCHASE_ORDER&lt;/li&gt;&lt;li&gt;REROUTE_TRACKING_NUMBER&lt;/li&gt;&lt;li&gt;RETURN_MATERIALS_AUTHORIZATION&lt;/li&gt;&lt;li&gt;RETURNED_TO_SHIPPER_TRACKING_NUMBER&lt;/li&gt;&lt;li&gt;SHIPPER_REFERENCE&lt;/li&gt;&lt;li&gt;TRANSBORDER_DISTRIBUTION&lt;/li&gt;&lt;li&gt;TRANSPORTATION_CONTROL_NUMBER&lt;/li&gt;&lt;li&gt;VIRTUAL_CONSOLIDATION&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Conditionally required. &lt;br&gt;Specifies the alternate reference value. &lt;br&gt; Example: 56754674567546754
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// Conditionally required. &lt;br&gt;Specifies the shipper's account number. &lt;br&gt; Note: Either account number or destination postal code and country code are mandatory to track by reference.&lt;br&gt; Example: 697561862
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number within a specific date range. &lt;br&gt;Format: YYYY-MM-DD &lt;br&gt; Example: 2020-03-29
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateBegin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipDateBegin { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number within a specific date range. &lt;br&gt;Format: YYYY-MM-DD &lt;br&gt; Example: 2020-04-01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateEndDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipDateEndDate { get; set; }

        /// <summary>
        /// Conditionally required. &lt;br&gt;Specifies the recipient's country code. &lt;br&gt; Note: Either account number or destination postal code and country code are mandatory to track by reference.&lt;br&gt; Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationCountryCode { get; set; }

        /// <summary>
        /// Conditionally required. &lt;br&gt;Indicate recipient postal code. Required for postal-aware countries. &lt;br&gt; Note: Either account number or destination postal code and country code are mandatory to track by reference. &lt;br&gt; Example: 75063&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationPostalCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrkcResponseVO_ReferenceNumber
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_ReferenceNumber Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the response elements for Track by alternate reference request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_ReferenceNumber
    {
        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cxsErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError> CxsErrors { get; set; }

        /// <summary>
        /// Contains detailed tracking entry information.  &lt;br&gt;Valid values: ACTUAL_DELIVERY, ACTUAL_PICKKUP, ACTUAL_TENDER, ANTICIPATED_TENDER, APPOINTMENT_DELIVERY, ATTEMPTED_DELIVERY, COMMITMENT, ESTIMATED_ARRIVAL_AT_GATEWAY, ESTIMATED_DELIVERY, ESTIMATED_PICKUP, ESTIMATED_RETURN_TO_STATION, SHIP, SHIPMENT_DATE_RECEIVED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completeTrackResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompleteTrackResult> CompleteTrackResults { get; set; }

        /// <summary>
        /// The cxs alert type, alert code, and alert message that is received.&lt;br&gt;example: TRACKING.DATA.NOTFOUND -  Tracking data unavailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        /// <summary>
        /// Indicates whether the tracking is successful.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Successful { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements for Tracking by TCN request type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_TCN
    {
        /// <summary>
        /// The information associated with the transportation control number.&lt;br&gt;Only 1 TCN is supported per request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tcnInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TCNInfo TcnInfo { get; set; } = new TCNInfo();

        /// <summary>
        /// Indicates if detailed scans are requested or not. &lt;br/&gt;Valid values are True, or False.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeDetailedScans", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDetailedScans { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCNInfo
    {
        /// <summary>
        /// Field which holds the Transportation Control Number value.&lt;br&gt; Example: N552428361Y555XXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// Field which holds information about carrier code of the shipment.&lt;br&gt; Example: FDXE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number within a specific date range. &lt;br&gt;Format: YYYY-MM-DD &lt;br&gt; Example: 2020-03-29
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateBegin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateBegin { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number within a specific date range. &lt;br&gt;Format: YYYY-MM-DD &lt;br&gt; Example: 2020-04-01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateEnd { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrkcResponseVO_TCN
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_TCN Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements for the Track by TCN request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_TCN
    {
        /// <summary>
        /// Contains detailed tracking entry information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completeTrackResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompleteTrackResult> CompleteTrackResults { get; set; }

        /// <summary>
        /// alert type, alert code, and alert message&lt;br&gt;Example: TRACKING.DATA.NOTFOUND -  Tracking data unavailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameter is a class having key-value pair.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter_2
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_SPOD
    {
        /// <summary>
        /// This object specifies the tracking document details such as types of documents, for example, SIGNATURE_PROOF_OF_DELIVERY and also the format of tracking document. Supported values are PDF and PNG. Default is PDF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackDocumentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackDocumentDetail TrackDocumentDetail { get; set; } = new TrackDocumentDetail();

        /// <summary>
        /// This is the placeholder for document specification details required to identify the shipment being tracked. This includes tracking information such as tracking qualifier, carrier code, and tracking number.&lt;br&gt;At least one trackDocumentSpecification is required. Maximum limit is 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackDocumentSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TrackDocumentSpecification> TrackDocumentSpecification { get; set; } = new System.Collections.ObjectModel.Collection<TrackDocumentSpecification>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the tracking document details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackDocumentDetail
    {
        /// <summary>
        /// Indicate the Tracking Document. &lt;br&gt;Valid values are SIGNATURE_PROOF_OF_DELIVERY, BILL_OF_LADING and FREIGHT_BILLING_DOCUMENT.&lt;br&gt;Example: SIGNATURE_PROOF_OF_DELIVERY.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Specifies the format of tracking document. &lt;br&gt;Valid values are PDF or PNG.&lt;br&gt;The values are key sensitive.&lt;br&gt;Note: documentTypes BILL_OF_LADING and FREIGHT_BILLING_DOCUMENT does not support PNG.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackDocumentSpecification
    {
        [Newtonsoft.Json.JsonProperty("trackingNumberInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackingNumberInfo2 TrackingNumberInfo { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are used to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number during a specific date range.&lt;br&gt;Format: YYYY-MM-DD&lt;br&gt;example: '2020-03-29'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateBegin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateBegin { get; set; }

        /// <summary>
        /// ShipDateBegin and ShipDateEnd are recommended to narrow the search, reduce lookup time, and avoid duplicates when searching for a specific tracking number during a specific date range.&lt;br&gt;Format: YYYY-MM-DD&lt;br&gt;example: '2020-04-01'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateEnd { get; set; }

        /// <summary>
        /// Specifies Signature Proof of Delivery(SPOD) account number for the shipment being tracked.&lt;br&gt;Conditionally required when documentType is BILL_OF_LADING or FREIGHT_BILLING_DOCUMENT&lt;br&gt;Example: 123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrkcResponseVO_SPOD
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_SPOD Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_SPOD
    {
        [Newtonsoft.Json.JsonProperty("localization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Localization Localization { get; set; }

        /// <summary>
        /// The types of tracking document.&lt;br&gt; Example: SIGNATURE_PROOF_OF_DELIVERY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        /// <summary>
        /// The format of the tracking document. &lt;br&gt;Valid values are PDF and PNG.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// Specifies the image of the recipient's signature (if the signature is available) once the shipment has been delivered. &lt;br&gt;Example: [byte1,byte2]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> Document { get; set; }

        /// <summary>
        /// Specifies the alert received when the recipient's signature has been            taken as a proof of shipment delivery.&lt;br&gt;Example: TRACKING.DATA.NOTFOUND -  Tracking data unavailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements for Tracking by Tracking Number. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Tracking_Numbers
    {
        /// <summary>
        /// Indicates if detailed scans are requested or not. &lt;br/&gt;Valid values are True, or False.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeDetailedScans", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeDetailedScans { get; set; }

        /// <summary>
        /// The tracking information of the shipment to be tracked. At least one occurrence of TrackingInfo is required. Maximum limit is 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MasterTrackingInfo> TrackingInfo { get; set; } = new System.Collections.ObjectModel.Collection<MasterTrackingInfo>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrkcResponseVO_TrackingNumber
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_TrackingNumber Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements for Tracking by tracking number request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_TrackingNumber
    {
        /// <summary>
        /// Contains detailed tracking entry information. &lt;br&gt;Valid values are- ACTUAL_DELIVERY, ACTUAL_PICKUP, ACTUAL_TENDER, ANTICIPATED_TENDER, APPOINTMENT_DELIVERY, ATTEMPTED_DELIVERY, COMMITMENT, ESTIMATED_ARRIVAL_AT_GATEWAY, ESTIMATED_DELIVERY, ESTIMATED_PICKUP, ESTIMATED_RETURN_TO_STATION, SHIP, SHIPMENT_DATA_RECEIVED.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completeTrackResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompleteTrackResult> CompleteTrackResults { get; set; }

        /// <summary>
        /// The cxs alert type, alert code and alert message&lt;br&gt;Example: TRACKING.DATA.NOTFOUND -  Tracking data unavailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Full_Schema_Multiple_Piece_ShipmentAssociatedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OUTBOUND_LINK_TO_RETURN")]
        OUTBOUND_LINK_TO_RETURN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_MPS")]
        STANDARD_MPS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_MPS")]
        GROUP_MPS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackingNumberInfoCarrierCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FDXE")]
        FDXE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXG")]
        FDXG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FXSP")]
        FXSP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FXFR")]
        FXFR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXC")]
        FDXC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FXCC")]
        FXCC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_CARGO")]
        FEDEX_CARGO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_CUSTOM_CRITICAL")]
        FEDEX_CUSTOM_CRITICAL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_EXPRESS")]
        FEDEX_EXPRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_FREIGHT")]
        FEDEX_FREIGHT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND")]
        FEDEX_GROUND = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_KINKOS")]
        FEDEX_KINKOS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FX")]
        FX = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FDFR")]
        FDFR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FDEG")]
        FDEG = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FXK")]
        FXK = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FDC")]
        FDC = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FDCC")]
        FDCC = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageIdentifierType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILL_OF_LADING")]
        BILL_OF_LADING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COD_RETURN_TRACKING_NUMBER")]
        COD_RETURN_TRACKING_NUMBER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_AUTHORIZATION_NUMBER")]
        CUSTOMER_AUTHORIZATION_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_REFERENCE")]
        CUSTOMER_REFERENCE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT")]
        DEPARTMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_AIRWAY_BILL")]
        DOCUMENT_AIRWAY_BILL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_ALTERNATE_REFERENCE")]
        EXPRESS_ALTERNATE_REFERENCE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE_JOB_ORDER_NUMBER")]
        FEDEX_OFFICE_JOB_ORDER_NUMBER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FREE_FORM_REFERENCE")]
        FREE_FORM_REFERENCE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTERNATIONAL")]
        GROUND_INTERNATIONAL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_SHIPMENT_ID")]
        GROUND_SHIPMENT_ID = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_MPS")]
        GROUP_MPS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNATIONAL_DISTRIBUTION")]
        INTERNATIONAL_DISTRIBUTION = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
        INVOICE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"JOB_GLOBAL_TRACKING_NUMBER")]
        JOB_GLOBAL_TRACKING_NUMBER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_GLOBAL_TRACKING_NUMBER")]
        ORDER_GLOBAL_TRACKING_NUMBER = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_TO_PAY_NUMBER")]
        ORDER_TO_PAY_NUMBER = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTBOUND_LINK_TO_RETURN")]
        OUTBOUND_LINK_TO_RETURN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PART_NUMBER")]
        PART_NUMBER = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTNER_CARRIER_NUMBER")]
        PARTNER_CARRIER_NUMBER = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PURCHASE_ORDER")]
        PURCHASE_ORDER = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"REROUTE_TRACKING_NUMBER")]
        REROUTE_TRACKING_NUMBER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_MATERIALS_AUTHORIZATION")]
        RETURN_MATERIALS_AUTHORIZATION = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED_TO_SHIPPER_TRACKING_NUMBER")]
        RETURNED_TO_SHIPPER_TRACKING_NUMBER = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_REFERENCE")]
        SHIPPER_REFERENCE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_MPS")]
        STANDARD_MPS = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING_CONTROL_NUMBER")]
        TRACKING_CONTROL_NUMBER = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING_NUMBER_OR_DOORTAG")]
        TRACKING_NUMBER_OR_DOORTAG = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSBORDER_DISTRIBUTION")]
        TRANSBORDER_DISTRIBUTION = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSPORTATION_CONTROL_NUMBER")]
        TRANSPORTATION_CONTROL_NUMBER = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"VIRTUAL_CONSOLIDATION")]
        VIRTUAL_CONSOLIDATION = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DistanceUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MI")]
        MI = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationDetail_1LocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_AUTHORIZED_SHIP_CENTER")]
        FEDEX_AUTHORIZED_SHIP_CENTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_SELF_SERVICE_LOCATION")]
        FEDEX_SELF_SERVICE_LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_STAFFED")]
        FEDEX_STAFFED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL_ALLICANCE_LOCATION")]
        RETAIL_ALLICANCE_LOCATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND_TERMINAL")]
        FEDEX_GROUND_TERMINAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_ONSITE")]
        FEDEX_ONSITE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DelayDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WEATHER")]
        WEATHER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATIONAL")]
        OPERATIONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL")]
        GENERAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CLEARANCE")]
        CLEARANCE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DelayDetailSubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SNOW")]
        SNOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TORNADO")]
        TORNADO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EARTHQUAKE etc")]
        EARTHQUAKE_etc = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DelayDetailStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED")]
        DELAYED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_TIME")]
        ON_TIME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EARLY")]
        EARLY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceCommitMessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER_DELIVERED_DESCRIPTION")]
        BROKER_DELIVERED_DESCRIPTION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED_DESCRIPTION")]
        CANCELLED_DESCRIPTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERY_IN_MULTIPLE_PIECE_SHIPMENT")]
        DELIVERY_IN_MULTIPLE_PIECE_SHIPMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_DELIVERY_DATE_UNAVAILABLE")]
        ESTIMATED_DELIVERY_DATE_UNAVAILABLE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCEPTION_IN_MULTIPLE_PIECE_SHIPMENT")]
        EXCEPTION_IN_MULTIPLE_PIECE_SHIPMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FINAL_DELIVERY_ATTEMPTED")]
        FINAL_DELIVERY_ATTEMPTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_DELIVERY_ATTEMPTED")]
        FIRST_DELIVERY_ATTEMPTED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HELD_PACKAGE_AVAILABLE_FOR_RECIPIENT_PICKUP")]
        HELD_PACKAGE_AVAILABLE_FOR_RECIPIENT_PICKUP = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HELD_PACKAGE_AVAILABLE_FOR_RECIPIENT_PICKUP_WITH_ADDRESS")]
        HELD_PACKAGE_AVAILABLE_FOR_RECIPIENT_PICKUP_WITH_ADDRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HELD_PACKAGE_NOT_AVAILABLE_FOR_RECIPIENT_PICKUP")]
        HELD_PACKAGE_NOT_AVAILABLE_FOR_RECIPIENT_PICKUP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_LABEL_CREATED")]
        SHIPMENT_LABEL_CREATED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBSEQUENT_DELIVERY_ATTEMPTED")]
        SUBSEQUENT_DELIVERY_ATTEMPTED = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_DELIVERED")]
        USPS_DELIVERED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_DELIVERING""")]
        USPS_DELIVERING = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AvailableImagesDetailSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL")]
        SMALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LARGE")]
        LARGE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AvailableImagesDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE_PROOF_OF_DELIVERY")]
        SIGNATURE_PROOF_OF_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BILL_OF_LADING")]
        BILL_OF_LADING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeliveryOptionElgibilityDetailsOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DISPUTE_DELIVERY")]
        DISPUTE_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIRECT_SIGNATURE_RELEASE")]
        INDIRECT_SIGNATURE_RELEASE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REDIRECT_TO_HOLD_AT_LOCATION")]
        REDIRECT_TO_HOLD_AT_LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REROUTE")]
        REROUTE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RESCHEDULE")]
        RESCHEDULE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_TO_SHIPPER")]
        RETURN_TO_SHIPPER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLEMENT_ADDRESS")]
        SUPPLEMENT_ADDRESS = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackingDateAndTimeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL_DELIVERY")]
        ACTUAL_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL_PICKUP")]
        ACTUAL_PICKUP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL_TENDER")]
        ACTUAL_TENDER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTICIPATED_TENDER")]
        ANTICIPATED_TENDER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTMENT_DELIVERY")]
        APPOINTMENT_DELIVERY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTEMPTED_DELIVERY")]
        ATTEMPTED_DELIVERY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMITMENT")]
        COMMITMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_ARRIVAL_AT_GATEWAY")]
        ESTIMATED_ARRIVAL_AT_GATEWAY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_DELIVERY")]
        ESTIMATED_DELIVERY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_PICKUP")]
        ESTIMATED_PICKUP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_RETURN_TO_STATION")]
        ESTIMATED_RETURN_TO_STATION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP")]
        SHIP = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_DATA_RECEIVED")]
        SHIPMENT_DATA_RECEIVED = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionsUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationDetailLocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_AUTHORIZED_SHIP_CENTER")]
        FEDEX_AUTHORIZED_SHIP_CENTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_SELF_SERVICE_LOCATION")]
        FEDEX_SELF_SERVICE_LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_STAFFED")]
        FEDEX_STAFFED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL_ALLICANCE_LOCATION")]
        RETAIL_ALLICANCE_LOCATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND_TERMINAL")]
        FEDEX_GROUND_TERMINAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_ONSITE")]
        FEDEX_ONSITE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomDeliveryOptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REROUTE")]
        REROUTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTMENT")]
        APPOINTMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_CERTAIN")]
        DATE_CERTAIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENING")]
        EVENING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REDIRECT_TO_HOLD_AT_LOCATION")]
        REDIRECT_TO_HOLD_AT_LOCATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_SIGNATURE_RELEASE")]
        ELECTRONIC_SIGNATURE_RELEASE = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimeWindowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL_DELIVERY")]
        ACTUAL_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL_PICKUP")]
        ACTUAL_PICKUP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL_TENDER")]
        ACTUAL_TENDER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTICIPATED_TENDER")]
        ANTICIPATED_TENDER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTMENT_DELIVERY")]
        APPOINTMENT_DELIVERY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTEMPTED_DELIVERY")]
        ATTEMPTED_DELIVERY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMITMENT")]
        COMMITMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_ARRIVAL_AT_GATEWAY")]
        ESTIMATED_ARRIVAL_AT_GATEWAY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_DELIVERY")]
        ESTIMATED_DELIVERY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_PICKUP")]
        ESTIMATED_PICKUP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_RETURN_TO_STATION")]
        ESTIMATED_RETURN_TO_STATION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP")]
        SHIP = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_DATA_RECEIVED")]
        SHIPMENT_DATA_RECEIVED = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PieceCountDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DESTINATION")]
        DESTINATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ORIGIN")]
        ORIGIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOTE")]
        NOTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackingNumberInfo_2CarrierCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FDXE")]
        FDXE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXG")]
        FDXG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FXSP")]
        FXSP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FXFR")]
        FXFR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXC")]
        FDXC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FXCC")]
        FXCC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_CARGO")]
        FEDEX_CARGO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_CUSTOM_CRITICAL")]
        FEDEX_CUSTOM_CRITICAL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_EXPRESS")]
        FEDEX_EXPRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_FREIGHT")]
        FEDEX_FREIGHT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND")]
        FEDEX_GROUND = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_KINKOS")]
        FEDEX_KINKOS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FX")]
        FX = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FDFR")]
        FDFR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FDEG")]
        FDEG = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FXK")]
        FXK = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FDC")]
        FDC = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FDCC")]
        FDCC = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingNumberInfo2 : TrackingNumberInfo
    {

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603